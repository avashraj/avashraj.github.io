<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Journals on putergoon.com</title>
    <link>avashraj.github.io/journal/</link>
    <description>Recent content in Journals on putergoon.com</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Mar 2025 07:40:20 -0700</lastBuildDate>
    <atom:link href="avashraj.github.io/journal/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mar 10 2025</title>
      <link>avashraj.github.io/journal/mar-10-2025/</link>
      <pubDate>Mon, 10 Mar 2025 07:40:20 -0700</pubDate>
      <guid>avashraj.github.io/journal/mar-10-2025/</guid>
      <description>&lt;h1 id=&#34;i-learned&#34;&gt;i learned&lt;/h1&gt;&#xA;&lt;p&gt;When coding with threads, two problems that may occur are &lt;strong&gt;starvation&lt;/strong&gt; and &lt;strong&gt;deadlock&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Starvation&lt;/strong&gt; - a thread waits indefinitely; a scheduling issue&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Deadlock&lt;/strong&gt; - a circular waiting for resources exists within threads; happens when resource dependencies form&#xA;a cycle&lt;/p&gt;&#xA;&lt;p&gt;there are 4 requirements for a deadlock:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;mutual exclusion - only one thread at a time can use a resource&lt;/li&gt;&#xA;&lt;li&gt;hold and wait - a thread holding at least one resource is waiting to acquire additional resources&lt;/li&gt;&#xA;&lt;li&gt;no preemption - resources are only voluntarily released by threads after they are finished with the resource&lt;/li&gt;&#xA;&lt;li&gt;circular wait - there exists a set ${ T_1 \dots T_n}$ of waiting threads where $T_1$ waits on $T_2$ and $T_n$&#xA;waits on $T_1$&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>Mar 09 2025</title>
      <link>avashraj.github.io/journal/mar-09-2025/</link>
      <pubDate>Sun, 09 Mar 2025 23:49:31 -0700</pubDate>
      <guid>avashraj.github.io/journal/mar-09-2025/</guid>
      <description>&lt;h1 id=&#34;i-learned&#34;&gt;i learned&lt;/h1&gt;&#xA;&lt;p&gt;i had a longish bus ride so i was skimming through the git manual pages in my terminal. I don&amp;rsquo;t remember anything to be&#xA;honest because I was just trying to keep my brain occupied while not doomscrolling.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mar 08 2025</title>
      <link>avashraj.github.io/journal/mar-08-2025/</link>
      <pubDate>Sat, 08 Mar 2025 21:59:13 -0800</pubDate>
      <guid>avashraj.github.io/journal/mar-08-2025/</guid>
      <description>&lt;h1 id=&#34;i-learned&#34;&gt;i learned&lt;/h1&gt;&#xA;&lt;p&gt;Mesh analysis is a circuit analysis technique where we create fake mesh currents in closed loops and apply KVL. With these&#xA;equations we can solve for whatever the problem asks for. Mesh analysis can only be done with planar circuits. To solve for&#xA;a system of equations I started using the julia REPL. I have been wanting to learn julia for a few weeks and I finally found&#xA;a way to use it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mar 07 2025</title>
      <link>avashraj.github.io/journal/mar-07-2025/</link>
      <pubDate>Sat, 08 Mar 2025 01:48:27 -0800</pubDate>
      <guid>avashraj.github.io/journal/mar-07-2025/</guid>
      <description>&lt;h1 id=&#34;i-learned&#34;&gt;i learned&lt;/h1&gt;&#xA;&lt;p&gt;KVL is Kirchhoff&amp;rsquo;s Voltage Law. It states that the sum of voltage drops and rise around a closed loop is zero. We treat voltage&#xA;rises as positive and voltage drops as negative. We make an equation for each loop. In a series circuit, the same current&#xA;flows through all components in a circuit. A branch is a single element in a circuit and a node is a point where 2 or more&#xA;components meet.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mar 06 2025</title>
      <link>avashraj.github.io/journal/mar-06-25/</link>
      <pubDate>Fri, 07 Mar 2025 15:52:28 -0800</pubDate>
      <guid>avashraj.github.io/journal/mar-06-25/</guid>
      <description>&lt;h1 id=&#34;i-learned&#34;&gt;i learned&lt;/h1&gt;&#xA;&lt;p&gt;I am doing this a day late :(&lt;/p&gt;&#xA;&lt;p&gt;I was helping a capstone team out with their project because it relates to my current work at school and I was able to work&#xA;through a git problem that someone had. He committed stuff locally but did not pull before comitting.&#xA;I was able to recognize this problem and say you should reset your last commit but save the changes in your workspace.&#xA;Then I guided him to stash his changes, pull remote changes, apply his stash and boom! No more git problem. This sounds&#xA;super simple, but I was feeling the day before that I was not good enough to do programming. Little victories like these&#xA;where my knowledge can help someone else reminds me that I can.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mar 05 2025</title>
      <link>avashraj.github.io/journal/mar-05-2025/</link>
      <pubDate>Wed, 05 Mar 2025 17:20:25 -0800</pubDate>
      <guid>avashraj.github.io/journal/mar-05-2025/</guid>
      <description>&lt;h1 id=&#34;i-learned&#34;&gt;i learned&lt;/h1&gt;&#xA;&lt;p&gt;in my computer vision lecture today, we learned more about constructing the fundamental matrix. The issue with our approach&#xA;was that the $F$ that we find is not guaranteed to have rank 2. We need rank 2 becuase $[e]_x$ has rank two. To make sure&#xA;of this, we need to constrain the matrix F. We do this by making another matrix $F&amp;rsquo;$ that is simply $F$ with its smallest&#xA;singular value dropped. The intuition for this is that by dropping the smallest singular value, we remove any noise that&#xA;might be affecting $F$ while keeping it as close as it was before. I also learned that in&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mar 04 2025</title>
      <link>avashraj.github.io/journal/mar-04-2025/</link>
      <pubDate>Tue, 04 Mar 2025 23:42:07 -0800</pubDate>
      <guid>avashraj.github.io/journal/mar-04-2025/</guid>
      <description>&lt;h1 id=&#34;i-learned&#34;&gt;i learned&lt;/h1&gt;&#xA;&lt;p&gt;I began studying for my circuit theory midterm next Wednesday. Ohm&amp;rsquo;s law is $V = IR$. It states that the voltage across a&#xA;resistor is equal to the current across if multiplied by the resistance. If we have two resistors in series, to get the&#xA;equivalent resistance we simply add the two resistances together. If we have two resistors in parallel, we do&#xA;$$&#xA;\frac{1}{R_{eq}} = \frac{1}{R_1} + \frac{1}{R_2}&#xA;$$&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mar 03 2025</title>
      <link>avashraj.github.io/journal/mar-03-2025/</link>
      <pubDate>Mon, 03 Mar 2025 22:33:12 -0800</pubDate>
      <guid>avashraj.github.io/journal/mar-03-2025/</guid>
      <description>&lt;h1 id=&#34;i-learned&#34;&gt;i learned&lt;/h1&gt;&#xA;&lt;p&gt;I didn&amp;rsquo;t learn much new I was mainly going over my notes that I have been writing for&#xA;computer vision.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mar 02 2025</title>
      <link>avashraj.github.io/journal/mar-02-2025/</link>
      <pubDate>Mon, 03 Mar 2025 12:41:08 -0800</pubDate>
      <guid>avashraj.github.io/journal/mar-02-2025/</guid>
      <description>&lt;p&gt;I learned about the hough transform, linear triangulation in terms of simple stereo, epipolar geometry, and the fundamental&#xA;matrix. I have written about these topics in my computer vision notes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mar 01 2025</title>
      <link>avashraj.github.io/journal/mar-01-2025/</link>
      <pubDate>Sat, 01 Mar 2025 18:25:26 -0800</pubDate>
      <guid>avashraj.github.io/journal/mar-01-2025/</guid>
      <description>&lt;h1 id=&#34;i-learned&#34;&gt;i learned&lt;/h1&gt;&#xA;&lt;p&gt;i started the 3blue1brown linear algebra playlist again to brush up on my linear algebra knowledge. A vector can be thought&#xA;of in many different ways. A physicist might think of it as an arrow with a direction and a length. A computer scientist&#xA;might think of it as a list of numbers. They are the same. If we would draw a CS 2d vector on a coordinate plan starting&#xA;at the origin, we would have a 2d arrow with length and direction. We have two operations on these vectors: vector addition&#xA;and scalar multiplication. Vector addition is the addition of two vectors of same length element wise. So if we had&#xA;$$&#xA;\mathbf{a} + \mathbf{b} =&#xA;\begin{bmatrix} a_1 \ a_2 \ a_3 \end{bmatrix} +&#xA;\begin{bmatrix} b_1 \ b_2 \ b_3 \end{bmatrix} =&#xA;\begin{bmatrix} a_1 + b_1 \ a_2 + b_2 \ a_3 + b_3 \end{bmatrix}&#xA;$$&#xA;Similarly for scalar multiplication:&#xA;$$&#xA;\begin{bmatrix} a_1 \ a_2 \ a_3 \end{bmatrix} * 2 =&#xA;\begin{bmatrix} 2a_1 \ 2a_2 \ 2a_3 \end{bmatrix}&#xA;$$&lt;/p&gt;</description>
    </item>
    <item>
      <title>Feb 28 2025</title>
      <link>avashraj.github.io/journal/feb-28-2025/</link>
      <pubDate>Sat, 01 Mar 2025 11:44:18 -0800</pubDate>
      <guid>avashraj.github.io/journal/feb-28-2025/</guid>
      <description>&lt;h1 id=&#34;i-learned&#34;&gt;i learned&lt;/h1&gt;&#xA;&lt;p&gt;I forgot to do this yesterday so I am doing it on March 1st. I was trying to set up postgresql on my vps and connect to it from&#xA;my computer. It wasn&amp;rsquo;t working for so long and Claude figured it out for me. My vps didn&amp;rsquo;t have an ingress rule that allowed&#xA;for remote connections.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Feb 27 2025</title>
      <link>avashraj.github.io/journal/feb-27-25/</link>
      <pubDate>Thu, 27 Feb 2025 23:02:04 -0800</pubDate>
      <guid>avashraj.github.io/journal/feb-27-25/</guid>
      <description>&lt;h1 id=&#34;i-learned&#34;&gt;i learned&lt;/h1&gt;&#xA;&lt;p&gt;Javascript is a single threaded programming language, so code such as network requests would take a lot of time and block the&#xA;main thread. We can avoid this problem with asynchronous code. We can have long tasks such as network requests happen in&#xA;the background without blocking the main thread.&lt;/p&gt;&#xA;&lt;p&gt;Two ways of handling asynchronous data requests are promises, a native JS concept and rxjs observables. Angular uses&#xA;observables primarily in their http system. A promise can get data over a period of time which will return response data&#xA;or an error object. They can only return a single value/object. Promises also cannot handle streams of data. Data streaming&#xA;is sending a large file as chunks at a time. Promises will also fetch data even if no one uses that data.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Feb 26 2025</title>
      <link>avashraj.github.io/journal/feb-26-2025/</link>
      <pubDate>Wed, 26 Feb 2025 13:31:07 -0800</pubDate>
      <guid>avashraj.github.io/journal/feb-26-2025/</guid>
      <description>&lt;h1 id=&#34;i-learned&#34;&gt;i learned&lt;/h1&gt;&#xA;&lt;p&gt;A thread is the smallest unit of execution in a CPU core(or CPU if there is only one core). One important thread function&#xA;is .join() which allows one thread to wait for another thread to finish before resuming execution. For example, if we&#xA;have two threads(A, B) and thread A attempts to join thread B,  A calls B.join(). Thread A would then be set to a blocked state&#xA;and be placed into B&amp;rsquo;s waiting queue. A would remain in a sleeping state until B finishes execution. Once B is finished&#xA;A gets placed back into the ready queue.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Feb 25 2025</title>
      <link>avashraj.github.io/journal/feb-25-2025/</link>
      <pubDate>Tue, 25 Feb 2025 22:00:55 -0800</pubDate>
      <guid>avashraj.github.io/journal/feb-25-2025/</guid>
      <description>&lt;h1 id=&#34;i-learned&#34;&gt;i learned&lt;/h1&gt;&#xA;&lt;p&gt;Today I woke up at 7 am after going to bed at 11 and I felt awesome. Minus the fact that&#xA;I was really fucking sick. my head and body ached and i couldn&amp;rsquo;t think straight. I had to&#xA;complete my calculator app and even though I felt shitty, I was able to go through it&#xA;much faster compared to yesterday. One error I could not figure out that ChatGPT found for&#xA;me was why when I tried to add two numbers it didn&amp;rsquo;t add but simply combined it. Looking&#xA;back on this now I should have realized instantly. The output was getting concatentated&#xA;because I passed in the numbers as strings! I was so mad at myself that I didn&amp;rsquo;t see that.&#xA;Besides that I didn&amp;rsquo;t learn anything else. I had circuit theory lab where we had to make&#xA;more complex circuits with resistors. Breadboards are pretty cool I wish I had one.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Feb 24 2025</title>
      <link>avashraj.github.io/journal/feb-24-2025/</link>
      <pubDate>Mon, 24 Feb 2025 22:11:49 -0800</pubDate>
      <guid>avashraj.github.io/journal/feb-24-2025/</guid>
      <description>&lt;h1 id=&#34;i-learned&#34;&gt;i learned&lt;/h1&gt;&#xA;&lt;p&gt;In operating systems class, I learned about the reader/writer synchronization&#xA;problem. If we are creating a shared document, we need a way for multiple people&#xA;to be able to read it and write it at the same time. The correct solution to this is&#xA;to use locks and monitors to protect the section of code that deals with our logical&#xA;variables. A couple requirements are that only one person can write to the doc at one&#xA;time, as many people as possible need to be able to read from it. (Also this is 12 hours&#xA;after my lecture, I&amp;rsquo;m just trying to active recall it to the best of my ability).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Feb 23 2025</title>
      <link>avashraj.github.io/journal/feb-23-25/</link>
      <pubDate>Sun, 23 Feb 2025 23:00:39 -0800</pubDate>
      <guid>avashraj.github.io/journal/feb-23-25/</guid>
      <description>&lt;h1 id=&#34;i-learned&#34;&gt;i learned&lt;/h1&gt;&#xA;&lt;p&gt;waking up late sucks terribly. learning concepts and being able to apply those concepts are wayyyy different&lt;/p&gt;</description>
    </item>
    <item>
      <title>Feb 22 2025</title>
      <link>avashraj.github.io/journal/feb-22-2025/</link>
      <pubDate>Sat, 22 Feb 2025 22:53:10 -0800</pubDate>
      <guid>avashraj.github.io/journal/feb-22-2025/</guid>
      <description>&lt;h1 id=&#34;i-learned&#34;&gt;i learned&lt;/h1&gt;&#xA;&lt;p&gt;I began designing the system for my friends and I&amp;rsquo;s startup. We will have a MacOS client, an API server, and an external Postgres DB.&#xA;It was pretty fun trying to figure out what was the best options. ChatGPT is a big help because theres so many important things&#xA;that I have no idea about. For example I thought we could just enable HTTPS in our API framework and let it run. While this is possible&#xA;with FastAPI, it is not industry standard. I want to work towards making everything I do standard industry procedure so I can better&#xA;prepare myself for the job market. Instead we would have to enable SSL certificates and have NGINX act as a reverse proxy. A SSL&#xA;certificate (secure socket i forgot the l) encrypts the data. A reverse proxy is a server that points to another server.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Feb 21 2025</title>
      <link>avashraj.github.io/journal/feb-21-2025/</link>
      <pubDate>Sat, 22 Feb 2025 01:20:16 -0800</pubDate>
      <guid>avashraj.github.io/journal/feb-21-2025/</guid>
      <description>&lt;h1 id=&#34;i-learned&#34;&gt;i learned&lt;/h1&gt;&#xA;&lt;p&gt;I studied another slideshow of my circuit theory class and I went over more fundamental concepts.&#xA;Resistance is the capability to stop the flow of current and is the opposite of conductance. The unit for resistance is&#xA;the ohm. This brings me to the first big concept/strategy for solving circuits: Ohm&amp;rsquo;s law. Ohm&amp;rsquo;s law states that the voltage&#xA;across a conductor is proportional to the amount of current that flows through it. $V = IR$&lt;/p&gt;</description>
    </item>
    <item>
      <title>Feb 20 2025</title>
      <link>avashraj.github.io/journal/feb-20-2025/</link>
      <pubDate>Fri, 21 Feb 2025 01:30:15 -0800</pubDate>
      <guid>avashraj.github.io/journal/feb-20-2025/</guid>
      <description>&lt;h3 id=&#34;i-learned&#34;&gt;i learned&lt;/h3&gt;&#xA;&lt;p&gt;I had my computer vision lab in the morning and I spent 99 minutes trying to figure out RANSAC and get it to work. I&#xA;initially thought it was easier than it actually was. I learned how to make the A matrix using numpy. It was just a&#xA;bunch of hardcoded array indexing to put the correct points in the right spots. That took me wayy longer than it should.&#xA;So the homography matrix will help us stitch together two images if they have at least 4 feature matches between the two&#xA;images. We get the features by using SIFT, (something we just use but do not derive). From these SIFT features, we can&#xA;find matches (I forget how we do this its late :(  ) between the two images. If we have at least 4 we can begin our RANSAC&#xA;loop.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Feb 19 2025</title>
      <link>avashraj.github.io/journal/feb-19-2025/</link>
      <pubDate>Wed, 19 Feb 2025 13:56:39 -0800</pubDate>
      <guid>avashraj.github.io/journal/feb-19-2025/</guid>
      <description>&lt;h3 id=&#34;i-learned&#34;&gt;i learned&lt;/h3&gt;&#xA;&lt;p&gt;In the morning I had my operating systems lecture where we discussed various synchronization problems. First, we reviewed&#xA;locks (not review for me becuase I missed the last lecture). Locks are a way to protect critical sections of multithreaded&#xA;code. One way to do this is to disable all interrupts, but this is an insecure method.&lt;/p&gt;&#xA;&lt;p&gt;We introduced the concept of &lt;strong&gt;semaphores&lt;/strong&gt;. A semaphore is a type of lock that has a counter with two methods:&#xA;.p() and .v() The p function checks if the variable (semaphores store a non negative integer) is non zero. If it is&#xA;we decrease it. The v function increments the&#xA;semaphore by one and wakes up sleeping threads waiting to access the shared data. If we were to imagine two subroutines that&#xA;need the same variable, we can initialize a semaphore to 1 and use it to maintain thread safety. Before one subroutine&#xA;accesses that variable we would call &lt;code&gt;semaphore.p()&lt;/code&gt; to lock it. After we run the critical section (code that should not be&#xA;interrupted during its execution) we can call &lt;code&gt;semaphore.v()&lt;/code&gt; to free it.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
